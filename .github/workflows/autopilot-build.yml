name: Autopilot Build (Scheduled + Manual)

on:
  schedule:
    - cron: "0 * * * *"   # hourly
  workflow_dispatch:
    inputs:
      app_url:
        description: "Public base URL (e.g., https://robust-magic-production.up.railway.app)"
        required: false
      key:
        description: "COMMAND_CENTER_KEY (optional; uses secret if blank)"
        required: false
      force:
        description: "Force build (skip debounce)"
        required: false
        default: "0"

concurrency:
  group: autopilot-build
  cancel-in-progress: false

jobs:
  build_now:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Resolve inputs
        id: cfg
        run: |
          APP_URL="${{ github.event.inputs.app_url }}"
          if [ -z "$APP_URL" ]; then APP_URL="${{ secrets.APP_URL }}"; fi
          if [ -z "$APP_URL" ]; then
            echo "APP_URL is required (provide input or set secrets.APP_URL)."
            exit 1
          fi
          KEY_IN="${{ github.event.inputs.key }}"
          if [ -z "$KEY_IN" ]; then KEY_IN="${{ secrets.COMMAND_CENTER_KEY }}"; fi
          if [ -z "$KEY_IN" ]; then
            echo "COMMAND_CENTER_KEY is required (provide input or set secrets.COMMAND_CENTER_KEY)."
            exit 1
          fi
          FORCE="${{ github.event.inputs.force }}"
          if [ -z "$FORCE" ]; then FORCE="0"; fi
          echo "APP_URL=$APP_URL" >> $GITHUB_OUTPUT
          echo "KEY=$KEY_IN"      >> $GITHUB_OUTPUT
          echo "FORCE=$FORCE"     >> $GITHUB_OUTPUT

      - name: Check budget status
        id: budget
        env:
          APP_URL: ${{ steps.cfg.outputs.APP_URL }}
          KEY:     ${{ steps.cfg.outputs.KEY }}
        run: |
          echo "Checking budget..."
          BUDGET_JSON=$(curl --retry 2 --retry-delay 2 --max-time 10 -fsSL \
            "$APP_URL/api/v1/budget/status?key=$KEY" || echo '{"exceeded":false}')
          echo "Budget response: $BUDGET_JSON"
          
          EXCEEDED=$(echo "$BUDGET_JSON" | jq -r '.exceeded // false')
          if [ "$EXCEEDED" = "true" ]; then
            echo "⚠️ Budget exceeded. Skipping build."
            echo "exceeded=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "exceeded=false" >> $GITHUB_OUTPUT

      - name: Heartbeat + build-now (with retries)
        if: steps.budget.outputs.exceeded != 'true'
        env:
          APP_URL: ${{ steps.cfg.outputs.APP_URL }}
          KEY:     ${{ steps.cfg.outputs.KEY }}
          FORCE:   ${{ steps.cfg.outputs.FORCE }}
        run: |
          set -e
          echo "Heartbeat..."
          curl --retry 3 --retry-delay 2 --max-time 15 -fsS \
            "$APP_URL/internal/cron/autopilot?key=$KEY" || true

          FORCE_PARAM=""
          if [ "$FORCE" = "1" ]; then FORCE_PARAM="&force=1"; fi

          echo "Trigger build-now..."
          BUILD_RESP=$(curl --retry 3 --retry-delay 2 --max-time 45 -fsSL \
            -X POST "$APP_URL/internal/autopilot/build-now?key=$KEY$FORCE_PARAM" \
            -H "Content-Type: application/json" \
            -d '{}')
          
          echo "$BUILD_RESP" | jq '.' || echo "$BUILD_RESP"
          
          # Check if skipped due to ROI
          SKIPPED=$(echo "$BUILD_RESP" | jq -r '.skipped // false')
          if [ "$SKIPPED" = "true" ]; then
            echo "ℹ️ Build skipped due to low ROI"
            REASON=$(echo "$BUILD_RESP" | jq -r '.reason // "unknown"')
            echo "Reason: $REASON"
          fi

          echo "Daily report tick..."
          curl --retry 3 --retry-delay 2 --max-time 20 -fsS \
            -X POST "$APP_URL/api/v1/autopilot/tick" \
            -H "X-Command-Key: $KEY" \
            -H "Content-Type: application/json" \
            -d '{}' || true

          echo "Done."
